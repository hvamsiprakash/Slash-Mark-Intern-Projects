# -*- coding: utf-8 -*-
"""task management app.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mntGfnpW_pEWRsig-eiGEPypy3kW8yv-
"""

import pandas as pd
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.pipeline import make_pipeline
import random

# Function to add a task to the list
def add_task(description, priority):
    new_task = pd.DataFrame({'description': [description], 'priority': [priority]})
    tasks = pd.concat([load_tasks(), new_task], ignore_index=True)
    save_tasks(tasks)
    return tasks

# Function to remove a task by description
def remove_task(description):
    tasks = load_tasks()
    tasks = tasks[tasks['description'] != description]
    save_tasks(tasks)
    return tasks

# Function to list all tasks
def list_tasks():
    tasks = load_tasks()
    if tasks.empty:
        return "No tasks available."
    else:
        return tasks.to_string(index=False)

# Function to recommend a task based on machine learning
def recommend_task():
    tasks = load_tasks()
    if not tasks.empty:
        high_priority_tasks = tasks[tasks['priority'] == 'High']
        if not high_priority_tasks.empty:
            random_task = random.choice(high_priority_tasks['description'])
            return f"Recommended task: {random_task} - Priority: High"
        else:
            return "No high-priority tasks available for recommendation."
    else:
        return "No tasks available for recommendations."

# Function to load tasks from CSV
def load_tasks():
    try:
        tasks = pd.read_csv('tasks.csv')
        return tasks
    except FileNotFoundError:
        return pd.DataFrame(columns=['description', 'priority'])

# Function to save tasks to CSV
def save_tasks(tasks):
    tasks.to_csv('tasks.csv', index=False)

# Train the task priority classifier
def train_classifier(tasks):
    if not tasks.empty:
        vectorizer = CountVectorizer()
        clf = MultinomialNB()
        model = make_pipeline(vectorizer, clf)
        model.fit(tasks['description'], tasks['priority'])
        return model
    else:
        return None

# Main menu
def task_management_app():
    tasks = load_tasks()
    model = train_classifier(tasks)

    while True:
        print("\nTask Management App")
        print("1. Add Task")
        print("2. Remove Task")
        print("3. List Tasks")
        print("4. Recommend Task")
        print("5. Exit")

        choice = input("Select an option: ")

        if choice == "1":
            description = input("Enter task description: ")
            priority = input("Enter task priority (Low/Medium/High): ").capitalize()
            tasks = add_task(description, priority)
            print("Task added successfully.")

        elif choice == "2":
            description = input("Enter task description to remove: ")
            tasks = remove_task(description)
            print("Task removed successfully.")

        elif choice == "3":
            print(list_tasks())

        elif choice == "4":
            if model is not None:
                print(recommend_task())
            else:
                print("No tasks available to recommend.")

        elif choice == "5":
            print("Goodbye!")
            break

        else:
            print("Invalid option. Please select a valid option.")

# Execute the Task Management App
task_management_app()

