# -*- coding: utf-8 -*-
"""XGBoost Home Price Prediction

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KJkNJW5GwHqylHTUe6D8sVRTIZ2_Ql7V
"""

# Importing necessary libraries
import pandas as pd
import numpy as np
import xgboost as xgb
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error
import matplotlib.pyplot as plt

# Load the dataset
data = pd.read_csv("kc_house_data.csv")

#Checking for null values
data.isnull().sum()

# Data Preprocessing
# Drop irrelevant columns
data.drop(['id', 'date'], axis=1, inplace=True)

data.head()

# Splitting data into features and target variable
X = data.drop(['price'], axis=1)
y = data['price']

# Splitting the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# XGBoost Model Training
model = xgb.XGBRegressor(objective ='reg:squarederror', colsample_bytree = 0.3, learning_rate = 0.1,
                max_depth = 5, alpha = 10, n_estimators = 100)

# Train the model with eval_set
eval_set = [(X_train, y_train), (X_test, y_test)]
model.fit(X_train, y_train, eval_set=eval_set, verbose=False)

# Prediction
y_pred = model.predict(X_test)

# Evaluation
mse = mean_squared_error(y_test, y_pred)
print("Mean Squared Error:", mse)

# Visualization
plt.figure(figsize=(10, 6))
plt.scatter(y_test, y_pred, alpha=0.5)
plt.xlabel("True Values")
plt.ylabel("Predictions")
plt.title("True vs Predicted Values")
plt.show()

# Training Performance Visualization
results = model.evals_result()
epochs = len(results['validation_0']['rmse'])
x_axis = range(0, epochs)
plt.figure(figsize=(10, 6))
plt.plot(x_axis, results['validation_0']['rmse'], label='Train')
plt.plot(x_axis, results['validation_1']['rmse'], label='Test')
plt.title("Training Performance")
plt.xlabel('Number of Iterations')
plt.ylabel('RMSE')
plt.legend()
plt.show()

# Function to predict price based on user input
def predict_price(model, user_input):
    # Convert user input to DataFrame
    user_input_df = pd.DataFrame([user_input], columns=X.columns)
    # Predict price
    predicted_price = model.predict(user_input_df)[0]
    return predicted_price

# User input for features
user_input = {}
for feature in X.columns:
    user_input[feature] = float(input(f"Enter value for {feature}: "))

# Predict price based on user input
predicted_price = predict_price(model, user_input)
print(f"Predicted Price: ${predicted_price:.2f}")

