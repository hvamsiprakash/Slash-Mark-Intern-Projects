# -*- coding: utf-8 -*-
"""Black Friday Sales Prediction

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1m4QKoy7lq3tfeiD6xqk3FIRuP8mHf-G_
"""

# Importing necessary packages
import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error
import matplotlib.pyplot as plt
import seaborn as sns

#Importing the dataset
df=pd.read_csv("BlackFridaySales.csv")

# Checking for missing values
df.isnull().sum()

# Handling missing values
df.fillna(df.median(), inplace=True)

#let's check if there are any values other than 'F' or 'M'
print(df['Gender'].unique())

#drop rows where 'Gender' is NaN
df = df.dropna(subset=['Gender'])

# Converting categorical data
df['Gender'] = df['Gender'].map({'F': 0, 'M': 1}).astype(int)
df['Age'] = LabelEncoder().fit_transform(df['Age'])
df['Stay_In_Current_City_Years'] = df['Stay_In_Current_City_Years'].str.replace('+', '').astype(int)
df['City_Category'] = LabelEncoder().fit_transform(df['City_Category'])

# Feature Selection
X = df.drop(['User_ID', 'Purchase','Product_ID'], axis=1)
y = df['Purchase']

X.head()

y.head()

# Splitting dataset
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Feature Scaling
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Model Training
model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Visualization
# Visualizing feature importances
feature_importances = pd.Series(model.feature_importances_, index=X.columns)
feature_importances.nlargest(10).plot(kind='barh')
plt.title('Feature Importances')
plt.show()

# Evaluation
y_pred = model.predict(X_test)
rmse = np.sqrt(mean_squared_error(y_test, y_pred))
print(f'Root Mean Squared Error: {rmse}')

# Prediction function
def predict_purchase(input_data):
    input_df = pd.DataFrame([input_data])
    input_df = input_df.apply(LabelEncoder().fit_transform)
    input_df = scaler.transform(input_df)
    return model.predict(input_df)

#Checking for the accuracy
from sklearn.metrics import r2_score
r2 = r2_score(y_test, y_pred)
print(f'R-squared: {r2}')

# User Input for Prediction
user_input = {
    'Gender': 'M',
    'Age': '26-35',
    'Occupation': 7,
    'City_Category': 'B',
    'Stay_In_Current_City_Years': '2',
    'Marital_Status': 1,
    'Product_Category_1': 3,
    'Product_Category_2': 0,
    'Product_Category_3': 0,
}
predicted_purchase = predict_purchase(user_input)
print(f'Predicted Purchase Amount: {predicted_purchase[0]}')

